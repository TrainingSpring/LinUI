@namespace LinUI.Components
<div class="T-DatePicker">
    <Select Data="_date" Position="Position" OnSelected="(res) => Console.WriteLine(res)" >
        @Placeholder
    </Select>
</div>

@code {

    [Parameter]
    public string Placeholder { get; set; } = "请选择时间";
    [Parameter]
    public string? Value { set; get; }

    int[] Position { set; get; } = new[] { 0, 0, 0 };
    List<object> _date { set; get; } = new List<object>();
    protected override Task OnInitializedAsync()
    {
        var now = DateTime.Now;
        var date =now.Year;
        var y_list = new List<object>();
        Position = new[]
        {
            0,now.Month-1,now.Day-1
        };
        
        while (date >= 1970)
        {
            var m_list = new List<object>();
            for (int i = 1; i < 13; i++)
            {
                var d_list = new List<object>();
                if (date % 4 == 0 && i == 2)
                {
                    for (int j = 1; j <= 29; j++)
                        d_list.Add(new {id = j, value = j});
                    
                }else if (i == 2)
                {
                    for (int j = 1; j <= 28; j++)
                        d_list.Add(new {id = j, value = j});
                }
                else
                {
                    int[] r = { 1, 3, 5, 7, 8, 10, 12 };
                    bool isBig = false;
                    for (int k = 0; k < r.Length; k++)
                    {
                        if (i == r[k])
                        {
                            isBig = true;
                            goto setDay;
                        }
                    }
                    setDay:
                    if (isBig)
                    {
                        for (int j = 1; j <= 31; j++)
                            d_list.Add(new {id = j, value = j});
                    }
                    else
                    {
                        for (int j = 1; j <= 30; j++)
                            d_list.Add(new {id = j, value = j});
                    }
                }
                m_list.Add(new { id = i, value = i,childs = d_list});
            }
            y_list.Add(new
            {
                id = date, value = date , childs = m_list
            });
            date--;
        }
        
        _date.Add(new
        {
            data=y_list
        });
        return base.OnInitializedAsync();
    }

}