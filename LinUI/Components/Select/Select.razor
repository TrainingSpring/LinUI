@namespace LinUI.Components
@using Newtonsoft.Json
@inject IJSRuntime _js
@typeparam TItem

<div class="T-Select" id="@SelectId">
    @ChildContent
</div>
 
@code {
    bool IsRenderSelect { set; get; } = false;
    [Parameter]
    // 选中的数据
    public List<TItem> Value { get; set; }
    [Parameter]
    public EventCallback<List<TItem>> ValueChanged { get; set; }
    [Parameter]
    public int[]? Position { set; get; } 
    // 一个唯一id
    string SelectId { get; } = "T-Select-" + Guid.NewGuid().ToString();
    // child content
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    // 数据
    [Parameter]
    public List<SelectStruct<TItem>> Data { get; set; } = new List<SelectStruct<TItem>>();
    // 连接符
    [Parameter]
    public string? Connector { set; get; }
    // 标题
    [Parameter]
    public string? Title { set; get; }
    // 当被选中
    [Parameter]
    public EventCallback<List<TItem>> OnSelected { get; set; }
    // 当滑动结束
    [Parameter]
    public EventCallback<List<TItem>> OnSlipEnd { get; set; }
    [JSInvokable]
    public void Selected(int[] indexArr,object data)
    {
        List<TItem> res = JsonConvert.DeserializeObject<List<TItem>>(data.ToString());
        ValueChanged.InvokeAsync(res);
        OnSelected.InvokeAsync(res);
    }
    // 每一次手势滑动结束后触发的回调函数
    [JSInvokable]
    public void SelectChange(int[] indexArr,object data)
    {
        List<TItem> res = JsonConvert.DeserializeObject<List<TItem>>(data.ToString());
        OnSlipEnd.InvokeAsync(res);
    }

    protected override bool ShouldRender()
    {
        if (!IsRenderSelect)
        {
            return true;
        }
        else return false;
    }

 
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var data = JsonConvert.SerializeObject(Data);
        if (firstRender)
        {
            var dotNetObj = DotNetObjectReference.Create(this);
            await _js.InvokeVoidAsync("initSelect", dotNetObj,SelectId,Title,data,Connector,Position);
        }
        else
        {
            await _js.InvokeVoidAsync("updateSelect",SelectId, Title,data);
        }
    }

}