@namespace LinUI.Components
@using Data
@using LinUI.Tools

<button disabled="@(Disabled ? "disabled" : null)" class="T-Button @("t-button-shape-" + Shape.GetDescriptionToString()) @("t-button-size-" + Size.GetDescriptionToString())"
        @onclick="OnClick"
        style="
             @(Block ? "display:block;width:100%" : "display:inline-block");
            background-color: @(Ghost ? "transparent" : Type[0]);
            color: @(Ghost ? Type[0] : Type[1]);
            border: 1px solid @Type[0];
            @(ShowLoading?"filter: opacity(0.6);":"")
            @((ButtonType.White == Type || ButtonType.Gray == Type)?$"border:1px solid {Type[1]};color:{Type[1]};":"" )
          
@Style">
    @if (ShowLoading)
    { 
        <Loading Style="margin-right: 10px;"></Loading> 
    }
    @if (!string.IsNullOrEmpty(IconName))
    {
        <Icon Name="@IconName" Style="margin-right: 10px;"/>
    }
    @ChildContent 
</button>

@code {

    [Parameter]
    public bool ShowLoading { set; get; } = false;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    // 按钮类型(ButtonType中的属性)
    [Parameter]
    public string[] Type { get; set; } = ButtonType.Gray;
    // 幽灵属性 , 按钮背景透明
    [Parameter]
    public bool Ghost { get; set; } = false;
    // 块级按钮
    [Parameter]
    public bool Block { get; set; } = false; 
    // 按钮形状
    [Parameter]
    public LinShape Shape { get; set; } = LinShape.Default;
    // 按钮尺寸
    [Parameter]
    public LinSize Size { get; set; } = LinSize.Default;
    // 其它自定义样式
    [Parameter]
    public string? Style { get; set; }
    // 图标
    [Parameter]
    public string? IconName { get; set; }
    // 禁用状态
    [Parameter]
    public bool Disabled { set; get; } = false;
    // 按钮点击回调
    [Parameter]
    public EventCallback OnClick { get; set; }


}